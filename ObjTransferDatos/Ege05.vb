'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Ege05
    Inherits DataSet
    
    Private tableEGE05 As EGE05DataTable
    
    Private table_Error As _ErrorDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EGE05")) Is Nothing) Then
                Me.Tables.Add(New EGE05DataTable(ds.Tables("EGE05")))
            End If
            If (Not (ds.Tables("Error")) Is Nothing) Then
                Me.Tables.Add(New _ErrorDataTable(ds.Tables("Error")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EGE05 As EGE05DataTable
        Get
            Return Me.tableEGE05
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Error As _ErrorDataTable
        Get
            Return Me.table_Error
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Ege05 = CType(MyBase.Clone,Ege05)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("EGE05")) Is Nothing) Then
            Me.Tables.Add(New EGE05DataTable(ds.Tables("EGE05")))
        End If
        If (Not (ds.Tables("Error")) Is Nothing) Then
            Me.Tables.Add(New _ErrorDataTable(ds.Tables("Error")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableEGE05 = CType(Me.Tables("EGE05"),EGE05DataTable)
        If (Not (Me.tableEGE05) Is Nothing) Then
            Me.tableEGE05.InitVars
        End If
        Me.table_Error = CType(Me.Tables("Error"),_ErrorDataTable)
        If (Not (Me.table_Error) Is Nothing) Then
            Me.table_Error.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Ege05"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ege05.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableEGE05 = New EGE05DataTable
        Me.Tables.Add(Me.tableEGE05)
        Me.table_Error = New _ErrorDataTable
        Me.Tables.Add(Me.table_Error)
    End Sub
    
    Private Function ShouldSerializeEGE05() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize_Error() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub EGE05RowChangeEventHandler(ByVal sender As Object, ByVal e As EGE05RowChangeEvent)
    
    Public Delegate Sub _ErrorRowChangeEventHandler(ByVal sender As Object, ByVal e As _ErrorRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EGE05DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnI_MAINT As DataColumn
        
        Private columnI_XISP As DataColumn
        
        Private columnI_TIDETRA As DataColumn
        
        Private columnI_NIDETRA As DataColumn
        
        Private columnI_TIDESUC As DataColumn
        
        Private columnI_NIDESUC As DataColumn
        
        Private columnI_CDEPSUC As DataColumn
        
        Private columnI_CCOL As DataColumn
        
        Private columnI_FSUELDO As DataColumn
        
        Private columnI_CTIPVIN As DataColumn
        
        Private columnI_CINDTDA As DataColumn
        
        Private columnI_FINGEMP As DataColumn
        
        Private columnI_FRETTRA As DataColumn
        
        Private columnI_NHORSUC As DataColumn
        
        Private columnI_XCARSUC As DataColumn
        
        Private columnI_VSALSUC As DataColumn
        
        Private columnI_NCUECON As DataColumn
        
        Private columnI_CTIPCUE As DataColumn
        
        Private columnI_CENTFIN As DataColumn
        
        Private columnI_TAFICAJ As DataColumn
        
        Private columnI_TAFIPOS As DataColumn
        
        Private columnI_FINGPOS As DataColumn
        
        Private columnAT_SIGN As DataColumn
        
        Private columnI_XNOMAPL As DataColumn
        
        Private columnI_XNOMPAN As DataColumn
        
        Private columnI_NDIGTRA As DataColumn
        
        Private columnI_XNOMCOT As DataColumn
        
        Private columnI_CESTSOC As DataColumn
        
        Private columnI_CCAT As DataColumn
        
        Private columnI_NEMPTRA As DataColumn
        
        Private columnI_XESTCAJ As DataColumn
        
        Private columnI_XESTPOS As DataColumn
        
        Private columnI_TIDEEMP As DataColumn
        
        Private columnI_NIDEEMP As DataColumn
        
        Private columnI_NDIGEMP As DataColumn
        
        Private columnI_CDEP As DataColumn
        
        Private columnI_XNOMEMP As DataColumn
        
        Private columnI_FINGBAS As DataColumn
        
        Private columnI_NHORBAS As DataColumn
        
        Private columnI_VSUETRA As DataColumn
        
        Private columnI_VSALTRA As DataColumn
        
        Private columnI_XNOMSUC As DataColumn
        
        Private columnI_CUSUNEW As DataColumn
        
        Private columnI_FULTNOV As DataColumn
        
        Private columnI_FCARCAJ As DataColumn
        
        Private columnMESSAGE As DataColumn
        
        Friend Sub New()
            MyBase.New("EGE05")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property I_MAINTColumn As DataColumn
            Get
                Return Me.columnI_MAINT
            End Get
        End Property
        
        Friend ReadOnly Property I_XISPColumn As DataColumn
            Get
                Return Me.columnI_XISP
            End Get
        End Property
        
        Friend ReadOnly Property I_TIDETRAColumn As DataColumn
            Get
                Return Me.columnI_TIDETRA
            End Get
        End Property
        
        Friend ReadOnly Property I_NIDETRAColumn As DataColumn
            Get
                Return Me.columnI_NIDETRA
            End Get
        End Property
        
        Friend ReadOnly Property I_TIDESUCColumn As DataColumn
            Get
                Return Me.columnI_TIDESUC
            End Get
        End Property
        
        Friend ReadOnly Property I_NIDESUCColumn As DataColumn
            Get
                Return Me.columnI_NIDESUC
            End Get
        End Property
        
        Friend ReadOnly Property I_CDEPSUCColumn As DataColumn
            Get
                Return Me.columnI_CDEPSUC
            End Get
        End Property
        
        Friend ReadOnly Property I_CCOLColumn As DataColumn
            Get
                Return Me.columnI_CCOL
            End Get
        End Property
        
        Friend ReadOnly Property I_FSUELDOColumn As DataColumn
            Get
                Return Me.columnI_FSUELDO
            End Get
        End Property
        
        Friend ReadOnly Property I_CTIPVINColumn As DataColumn
            Get
                Return Me.columnI_CTIPVIN
            End Get
        End Property
        
        Friend ReadOnly Property I_CINDTDAColumn As DataColumn
            Get
                Return Me.columnI_CINDTDA
            End Get
        End Property
        
        Friend ReadOnly Property I_FINGEMPColumn As DataColumn
            Get
                Return Me.columnI_FINGEMP
            End Get
        End Property
        
        Friend ReadOnly Property I_FRETTRAColumn As DataColumn
            Get
                Return Me.columnI_FRETTRA
            End Get
        End Property
        
        Friend ReadOnly Property I_NHORSUCColumn As DataColumn
            Get
                Return Me.columnI_NHORSUC
            End Get
        End Property
        
        Friend ReadOnly Property I_XCARSUCColumn As DataColumn
            Get
                Return Me.columnI_XCARSUC
            End Get
        End Property
        
        Friend ReadOnly Property I_VSALSUCColumn As DataColumn
            Get
                Return Me.columnI_VSALSUC
            End Get
        End Property
        
        Friend ReadOnly Property I_NCUECONColumn As DataColumn
            Get
                Return Me.columnI_NCUECON
            End Get
        End Property
        
        Friend ReadOnly Property I_CTIPCUEColumn As DataColumn
            Get
                Return Me.columnI_CTIPCUE
            End Get
        End Property
        
        Friend ReadOnly Property I_CENTFINColumn As DataColumn
            Get
                Return Me.columnI_CENTFIN
            End Get
        End Property
        
        Friend ReadOnly Property I_TAFICAJColumn As DataColumn
            Get
                Return Me.columnI_TAFICAJ
            End Get
        End Property
        
        Friend ReadOnly Property I_TAFIPOSColumn As DataColumn
            Get
                Return Me.columnI_TAFIPOS
            End Get
        End Property
        
        Friend ReadOnly Property I_FINGPOSColumn As DataColumn
            Get
                Return Me.columnI_FINGPOS
            End Get
        End Property
        
        Friend ReadOnly Property AT_SIGNColumn As DataColumn
            Get
                Return Me.columnAT_SIGN
            End Get
        End Property
        
        Friend ReadOnly Property I_XNOMAPLColumn As DataColumn
            Get
                Return Me.columnI_XNOMAPL
            End Get
        End Property
        
        Friend ReadOnly Property I_XNOMPANColumn As DataColumn
            Get
                Return Me.columnI_XNOMPAN
            End Get
        End Property
        
        Friend ReadOnly Property I_NDIGTRAColumn As DataColumn
            Get
                Return Me.columnI_NDIGTRA
            End Get
        End Property
        
        Friend ReadOnly Property I_XNOMCOTColumn As DataColumn
            Get
                Return Me.columnI_XNOMCOT
            End Get
        End Property
        
        Friend ReadOnly Property I_CESTSOCColumn As DataColumn
            Get
                Return Me.columnI_CESTSOC
            End Get
        End Property
        
        Friend ReadOnly Property I_CCATColumn As DataColumn
            Get
                Return Me.columnI_CCAT
            End Get
        End Property
        
        Friend ReadOnly Property I_NEMPTRAColumn As DataColumn
            Get
                Return Me.columnI_NEMPTRA
            End Get
        End Property
        
        Friend ReadOnly Property I_XESTCAJColumn As DataColumn
            Get
                Return Me.columnI_XESTCAJ
            End Get
        End Property
        
        Friend ReadOnly Property I_XESTPOSColumn As DataColumn
            Get
                Return Me.columnI_XESTPOS
            End Get
        End Property
        
        Friend ReadOnly Property I_TIDEEMPColumn As DataColumn
            Get
                Return Me.columnI_TIDEEMP
            End Get
        End Property
        
        Friend ReadOnly Property I_NIDEEMPColumn As DataColumn
            Get
                Return Me.columnI_NIDEEMP
            End Get
        End Property
        
        Friend ReadOnly Property I_NDIGEMPColumn As DataColumn
            Get
                Return Me.columnI_NDIGEMP
            End Get
        End Property
        
        Friend ReadOnly Property I_CDEPColumn As DataColumn
            Get
                Return Me.columnI_CDEP
            End Get
        End Property
        
        Friend ReadOnly Property I_XNOMEMPColumn As DataColumn
            Get
                Return Me.columnI_XNOMEMP
            End Get
        End Property
        
        Friend ReadOnly Property I_FINGBASColumn As DataColumn
            Get
                Return Me.columnI_FINGBAS
            End Get
        End Property
        
        Friend ReadOnly Property I_NHORBASColumn As DataColumn
            Get
                Return Me.columnI_NHORBAS
            End Get
        End Property
        
        Friend ReadOnly Property I_VSUETRAColumn As DataColumn
            Get
                Return Me.columnI_VSUETRA
            End Get
        End Property
        
        Friend ReadOnly Property I_VSALTRAColumn As DataColumn
            Get
                Return Me.columnI_VSALTRA
            End Get
        End Property
        
        Friend ReadOnly Property I_XNOMSUCColumn As DataColumn
            Get
                Return Me.columnI_XNOMSUC
            End Get
        End Property
        
        Friend ReadOnly Property I_CUSUNEWColumn As DataColumn
            Get
                Return Me.columnI_CUSUNEW
            End Get
        End Property
        
        Friend ReadOnly Property I_FULTNOVColumn As DataColumn
            Get
                Return Me.columnI_FULTNOV
            End Get
        End Property
        
        Friend ReadOnly Property I_FCARCAJColumn As DataColumn
            Get
                Return Me.columnI_FCARCAJ
            End Get
        End Property
        
        Friend ReadOnly Property MESSAGEColumn As DataColumn
            Get
                Return Me.columnMESSAGE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EGE05Row
            Get
                Return CType(Me.Rows(index),EGE05Row)
            End Get
        End Property
        
        Public Event EGE05RowChanged As EGE05RowChangeEventHandler
        
        Public Event EGE05RowChanging As EGE05RowChangeEventHandler
        
        Public Event EGE05RowDeleted As EGE05RowChangeEventHandler
        
        Public Event EGE05RowDeleting As EGE05RowChangeEventHandler
        
        Public Overloads Sub AddEGE05Row(ByVal row As EGE05Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEGE05Row( _
                    ByVal I_MAINT As String,  _
                    ByVal I_XISP As String,  _
                    ByVal I_TIDETRA As String,  _
                    ByVal I_NIDETRA As String,  _
                    ByVal I_TIDESUC As String,  _
                    ByVal I_NIDESUC As String,  _
                    ByVal I_CDEPSUC As String,  _
                    ByVal I_CCOL As String,  _
                    ByVal I_FSUELDO As String,  _
                    ByVal I_CTIPVIN As String,  _
                    ByVal I_CINDTDA As String,  _
                    ByVal I_FINGEMP As String,  _
                    ByVal I_FRETTRA As String,  _
                    ByVal I_NHORSUC As String,  _
                    ByVal I_XCARSUC As String,  _
                    ByVal I_VSALSUC As String,  _
                    ByVal I_NCUECON As String,  _
                    ByVal I_CTIPCUE As String,  _
                    ByVal I_CENTFIN As String,  _
                    ByVal I_TAFICAJ As String,  _
                    ByVal I_TAFIPOS As String,  _
                    ByVal I_FINGPOS As String,  _
                    ByVal AT_SIGN As String,  _
                    ByVal I_XNOMAPL As String,  _
                    ByVal I_XNOMPAN As String,  _
                    ByVal I_NDIGTRA As String,  _
                    ByVal I_XNOMCOT As String,  _
                    ByVal I_CESTSOC As String,  _
                    ByVal I_CCAT As String,  _
                    ByVal I_NEMPTRA As String,  _
                    ByVal I_XESTCAJ As String,  _
                    ByVal I_XESTPOS As String,  _
                    ByVal I_TIDEEMP As String,  _
                    ByVal I_NIDEEMP As String,  _
                    ByVal I_NDIGEMP As String,  _
                    ByVal I_CDEP As String,  _
                    ByVal I_XNOMEMP As String,  _
                    ByVal I_FINGBAS As String,  _
                    ByVal I_NHORBAS As String,  _
                    ByVal I_VSUETRA As String,  _
                    ByVal I_VSALTRA As String,  _
                    ByVal I_XNOMSUC As String,  _
                    ByVal I_CUSUNEW As String,  _
                    ByVal I_FULTNOV As String,  _
                    ByVal I_FCARCAJ As String,  _
                    ByVal MESSAGE As String) As EGE05Row
            Dim rowEGE05Row As EGE05Row = CType(Me.NewRow,EGE05Row)
            rowEGE05Row.ItemArray = New Object() {I_MAINT, I_XISP, I_TIDETRA, I_NIDETRA, I_TIDESUC, I_NIDESUC, I_CDEPSUC, I_CCOL, I_FSUELDO, I_CTIPVIN, I_CINDTDA, I_FINGEMP, I_FRETTRA, I_NHORSUC, I_XCARSUC, I_VSALSUC, I_NCUECON, I_CTIPCUE, I_CENTFIN, I_TAFICAJ, I_TAFIPOS, I_FINGPOS, AT_SIGN, I_XNOMAPL, I_XNOMPAN, I_NDIGTRA, I_XNOMCOT, I_CESTSOC, I_CCAT, I_NEMPTRA, I_XESTCAJ, I_XESTPOS, I_TIDEEMP, I_NIDEEMP, I_NDIGEMP, I_CDEP, I_XNOMEMP, I_FINGBAS, I_NHORBAS, I_VSUETRA, I_VSALTRA, I_XNOMSUC, I_CUSUNEW, I_FULTNOV, I_FCARCAJ, MESSAGE}
            Me.Rows.Add(rowEGE05Row)
            Return rowEGE05Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EGE05DataTable = CType(MyBase.Clone,EGE05DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EGE05DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnI_MAINT = Me.Columns("I_MAINT")
            Me.columnI_XISP = Me.Columns("I_XISP")
            Me.columnI_TIDETRA = Me.Columns("I_TIDETRA")
            Me.columnI_NIDETRA = Me.Columns("I_NIDETRA")
            Me.columnI_TIDESUC = Me.Columns("I_TIDESUC")
            Me.columnI_NIDESUC = Me.Columns("I_NIDESUC")
            Me.columnI_CDEPSUC = Me.Columns("I_CDEPSUC")
            Me.columnI_CCOL = Me.Columns("I_CCOL")
            Me.columnI_FSUELDO = Me.Columns("I_FSUELDO")
            Me.columnI_CTIPVIN = Me.Columns("I_CTIPVIN")
            Me.columnI_CINDTDA = Me.Columns("I_CINDTDA")
            Me.columnI_FINGEMP = Me.Columns("I_FINGEMP")
            Me.columnI_FRETTRA = Me.Columns("I_FRETTRA")
            Me.columnI_NHORSUC = Me.Columns("I_NHORSUC")
            Me.columnI_XCARSUC = Me.Columns("I_XCARSUC")
            Me.columnI_VSALSUC = Me.Columns("I_VSALSUC")
            Me.columnI_NCUECON = Me.Columns("I_NCUECON")
            Me.columnI_CTIPCUE = Me.Columns("I_CTIPCUE")
            Me.columnI_CENTFIN = Me.Columns("I_CENTFIN")
            Me.columnI_TAFICAJ = Me.Columns("I_TAFICAJ")
            Me.columnI_TAFIPOS = Me.Columns("I_TAFIPOS")
            Me.columnI_FINGPOS = Me.Columns("I_FINGPOS")
            Me.columnAT_SIGN = Me.Columns("AT_SIGN")
            Me.columnI_XNOMAPL = Me.Columns("I_XNOMAPL")
            Me.columnI_XNOMPAN = Me.Columns("I_XNOMPAN")
            Me.columnI_NDIGTRA = Me.Columns("I_NDIGTRA")
            Me.columnI_XNOMCOT = Me.Columns("I_XNOMCOT")
            Me.columnI_CESTSOC = Me.Columns("I_CESTSOC")
            Me.columnI_CCAT = Me.Columns("I_CCAT")
            Me.columnI_NEMPTRA = Me.Columns("I_NEMPTRA")
            Me.columnI_XESTCAJ = Me.Columns("I_XESTCAJ")
            Me.columnI_XESTPOS = Me.Columns("I_XESTPOS")
            Me.columnI_TIDEEMP = Me.Columns("I_TIDEEMP")
            Me.columnI_NIDEEMP = Me.Columns("I_NIDEEMP")
            Me.columnI_NDIGEMP = Me.Columns("I_NDIGEMP")
            Me.columnI_CDEP = Me.Columns("I_CDEP")
            Me.columnI_XNOMEMP = Me.Columns("I_XNOMEMP")
            Me.columnI_FINGBAS = Me.Columns("I_FINGBAS")
            Me.columnI_NHORBAS = Me.Columns("I_NHORBAS")
            Me.columnI_VSUETRA = Me.Columns("I_VSUETRA")
            Me.columnI_VSALTRA = Me.Columns("I_VSALTRA")
            Me.columnI_XNOMSUC = Me.Columns("I_XNOMSUC")
            Me.columnI_CUSUNEW = Me.Columns("I_CUSUNEW")
            Me.columnI_FULTNOV = Me.Columns("I_FULTNOV")
            Me.columnI_FCARCAJ = Me.Columns("I_FCARCAJ")
            Me.columnMESSAGE = Me.Columns("MESSAGE")
        End Sub
        
        Private Sub InitClass()
            Me.columnI_MAINT = New DataColumn("I_MAINT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_MAINT)
            Me.columnI_XISP = New DataColumn("I_XISP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_XISP)
            Me.columnI_TIDETRA = New DataColumn("I_TIDETRA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_TIDETRA)
            Me.columnI_NIDETRA = New DataColumn("I_NIDETRA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_NIDETRA)
            Me.columnI_TIDESUC = New DataColumn("I_TIDESUC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_TIDESUC)
            Me.columnI_NIDESUC = New DataColumn("I_NIDESUC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_NIDESUC)
            Me.columnI_CDEPSUC = New DataColumn("I_CDEPSUC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CDEPSUC)
            Me.columnI_CCOL = New DataColumn("I_CCOL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CCOL)
            Me.columnI_FSUELDO = New DataColumn("I_FSUELDO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_FSUELDO)
            Me.columnI_CTIPVIN = New DataColumn("I_CTIPVIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CTIPVIN)
            Me.columnI_CINDTDA = New DataColumn("I_CINDTDA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CINDTDA)
            Me.columnI_FINGEMP = New DataColumn("I_FINGEMP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_FINGEMP)
            Me.columnI_FRETTRA = New DataColumn("I_FRETTRA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_FRETTRA)
            Me.columnI_NHORSUC = New DataColumn("I_NHORSUC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_NHORSUC)
            Me.columnI_XCARSUC = New DataColumn("I_XCARSUC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_XCARSUC)
            Me.columnI_VSALSUC = New DataColumn("I_VSALSUC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_VSALSUC)
            Me.columnI_NCUECON = New DataColumn("I_NCUECON", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_NCUECON)
            Me.columnI_CTIPCUE = New DataColumn("I_CTIPCUE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CTIPCUE)
            Me.columnI_CENTFIN = New DataColumn("I_CENTFIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CENTFIN)
            Me.columnI_TAFICAJ = New DataColumn("I_TAFICAJ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_TAFICAJ)
            Me.columnI_TAFIPOS = New DataColumn("I_TAFIPOS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_TAFIPOS)
            Me.columnI_FINGPOS = New DataColumn("I_FINGPOS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_FINGPOS)
            Me.columnAT_SIGN = New DataColumn("AT_SIGN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAT_SIGN)
            Me.columnI_XNOMAPL = New DataColumn("I_XNOMAPL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_XNOMAPL)
            Me.columnI_XNOMPAN = New DataColumn("I_XNOMPAN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_XNOMPAN)
            Me.columnI_NDIGTRA = New DataColumn("I_NDIGTRA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_NDIGTRA)
            Me.columnI_XNOMCOT = New DataColumn("I_XNOMCOT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_XNOMCOT)
            Me.columnI_CESTSOC = New DataColumn("I_CESTSOC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CESTSOC)
            Me.columnI_CCAT = New DataColumn("I_CCAT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CCAT)
            Me.columnI_NEMPTRA = New DataColumn("I_NEMPTRA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_NEMPTRA)
            Me.columnI_XESTCAJ = New DataColumn("I_XESTCAJ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_XESTCAJ)
            Me.columnI_XESTPOS = New DataColumn("I_XESTPOS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_XESTPOS)
            Me.columnI_TIDEEMP = New DataColumn("I_TIDEEMP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_TIDEEMP)
            Me.columnI_NIDEEMP = New DataColumn("I_NIDEEMP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_NIDEEMP)
            Me.columnI_NDIGEMP = New DataColumn("I_NDIGEMP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_NDIGEMP)
            Me.columnI_CDEP = New DataColumn("I_CDEP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CDEP)
            Me.columnI_XNOMEMP = New DataColumn("I_XNOMEMP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_XNOMEMP)
            Me.columnI_FINGBAS = New DataColumn("I_FINGBAS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_FINGBAS)
            Me.columnI_NHORBAS = New DataColumn("I_NHORBAS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_NHORBAS)
            Me.columnI_VSUETRA = New DataColumn("I_VSUETRA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_VSUETRA)
            Me.columnI_VSALTRA = New DataColumn("I_VSALTRA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_VSALTRA)
            Me.columnI_XNOMSUC = New DataColumn("I_XNOMSUC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_XNOMSUC)
            Me.columnI_CUSUNEW = New DataColumn("I_CUSUNEW", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_CUSUNEW)
            Me.columnI_FULTNOV = New DataColumn("I_FULTNOV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_FULTNOV)
            Me.columnI_FCARCAJ = New DataColumn("I_FCARCAJ", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnI_FCARCAJ)
            Me.columnMESSAGE = New DataColumn("MESSAGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMESSAGE)
        End Sub
        
        Public Function NewEGE05Row() As EGE05Row
            Return CType(Me.NewRow,EGE05Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EGE05Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EGE05Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EGE05RowChangedEvent) Is Nothing) Then
                RaiseEvent EGE05RowChanged(Me, New EGE05RowChangeEvent(CType(e.Row,EGE05Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EGE05RowChangingEvent) Is Nothing) Then
                RaiseEvent EGE05RowChanging(Me, New EGE05RowChangeEvent(CType(e.Row,EGE05Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EGE05RowDeletedEvent) Is Nothing) Then
                RaiseEvent EGE05RowDeleted(Me, New EGE05RowChangeEvent(CType(e.Row,EGE05Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EGE05RowDeletingEvent) Is Nothing) Then
                RaiseEvent EGE05RowDeleting(Me, New EGE05RowChangeEvent(CType(e.Row,EGE05Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEGE05Row(ByVal row As EGE05Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EGE05Row
        Inherits DataRow
        
        Private tableEGE05 As EGE05DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEGE05 = CType(Me.Table,EGE05DataTable)
        End Sub
        
        Public Property I_MAINT As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_MAINTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_MAINTColumn) = value
            End Set
        End Property
        
        Public Property I_XISP As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_XISPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_XISPColumn) = value
            End Set
        End Property
        
        Public Property I_TIDETRA As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_TIDETRAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_TIDETRAColumn) = value
            End Set
        End Property
        
        Public Property I_NIDETRA As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_NIDETRAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_NIDETRAColumn) = value
            End Set
        End Property
        
        Public Property I_TIDESUC As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_TIDESUCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_TIDESUCColumn) = value
            End Set
        End Property
        
        Public Property I_NIDESUC As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_NIDESUCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_NIDESUCColumn) = value
            End Set
        End Property
        
        Public Property I_CDEPSUC As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CDEPSUCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CDEPSUCColumn) = value
            End Set
        End Property
        
        Public Property I_CCOL As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CCOLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CCOLColumn) = value
            End Set
        End Property
        
        Public Property I_FSUELDO As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_FSUELDOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_FSUELDOColumn) = value
            End Set
        End Property
        
        Public Property I_CTIPVIN As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CTIPVINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CTIPVINColumn) = value
            End Set
        End Property
        
        Public Property I_CINDTDA As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CINDTDAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CINDTDAColumn) = value
            End Set
        End Property
        
        Public Property I_FINGEMP As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_FINGEMPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_FINGEMPColumn) = value
            End Set
        End Property
        
        Public Property I_FRETTRA As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_FRETTRAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_FRETTRAColumn) = value
            End Set
        End Property
        
        Public Property I_NHORSUC As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_NHORSUCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_NHORSUCColumn) = value
            End Set
        End Property
        
        Public Property I_XCARSUC As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_XCARSUCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_XCARSUCColumn) = value
            End Set
        End Property
        
        Public Property I_VSALSUC As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_VSALSUCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_VSALSUCColumn) = value
            End Set
        End Property
        
        Public Property I_NCUECON As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_NCUECONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_NCUECONColumn) = value
            End Set
        End Property
        
        Public Property I_CTIPCUE As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CTIPCUEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CTIPCUEColumn) = value
            End Set
        End Property
        
        Public Property I_CENTFIN As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CENTFINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CENTFINColumn) = value
            End Set
        End Property
        
        Public Property I_TAFICAJ As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_TAFICAJColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_TAFICAJColumn) = value
            End Set
        End Property
        
        Public Property I_TAFIPOS As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_TAFIPOSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_TAFIPOSColumn) = value
            End Set
        End Property
        
        Public Property I_FINGPOS As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_FINGPOSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_FINGPOSColumn) = value
            End Set
        End Property
        
        Public Property AT_SIGN As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.AT_SIGNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.AT_SIGNColumn) = value
            End Set
        End Property
        
        Public Property I_XNOMAPL As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_XNOMAPLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_XNOMAPLColumn) = value
            End Set
        End Property
        
        Public Property I_XNOMPAN As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_XNOMPANColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_XNOMPANColumn) = value
            End Set
        End Property
        
        Public Property I_NDIGTRA As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_NDIGTRAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_NDIGTRAColumn) = value
            End Set
        End Property
        
        Public Property I_XNOMCOT As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_XNOMCOTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_XNOMCOTColumn) = value
            End Set
        End Property
        
        Public Property I_CESTSOC As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CESTSOCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CESTSOCColumn) = value
            End Set
        End Property
        
        Public Property I_CCAT As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CCATColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CCATColumn) = value
            End Set
        End Property
        
        Public Property I_NEMPTRA As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_NEMPTRAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_NEMPTRAColumn) = value
            End Set
        End Property
        
        Public Property I_XESTCAJ As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_XESTCAJColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_XESTCAJColumn) = value
            End Set
        End Property
        
        Public Property I_XESTPOS As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_XESTPOSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_XESTPOSColumn) = value
            End Set
        End Property
        
        Public Property I_TIDEEMP As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_TIDEEMPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_TIDEEMPColumn) = value
            End Set
        End Property
        
        Public Property I_NIDEEMP As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_NIDEEMPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_NIDEEMPColumn) = value
            End Set
        End Property
        
        Public Property I_NDIGEMP As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_NDIGEMPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_NDIGEMPColumn) = value
            End Set
        End Property
        
        Public Property I_CDEP As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CDEPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CDEPColumn) = value
            End Set
        End Property
        
        Public Property I_XNOMEMP As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_XNOMEMPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_XNOMEMPColumn) = value
            End Set
        End Property
        
        Public Property I_FINGBAS As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_FINGBASColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_FINGBASColumn) = value
            End Set
        End Property
        
        Public Property I_NHORBAS As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_NHORBASColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_NHORBASColumn) = value
            End Set
        End Property
        
        Public Property I_VSUETRA As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_VSUETRAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_VSUETRAColumn) = value
            End Set
        End Property
        
        Public Property I_VSALTRA As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_VSALTRAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_VSALTRAColumn) = value
            End Set
        End Property
        
        Public Property I_XNOMSUC As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_XNOMSUCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_XNOMSUCColumn) = value
            End Set
        End Property
        
        Public Property I_CUSUNEW As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_CUSUNEWColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_CUSUNEWColumn) = value
            End Set
        End Property
        
        Public Property I_FULTNOV As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_FULTNOVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_FULTNOVColumn) = value
            End Set
        End Property
        
        Public Property I_FCARCAJ As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.I_FCARCAJColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.I_FCARCAJColumn) = value
            End Set
        End Property
        
        Public Property MESSAGE As String
            Get
                Try 
                    Return CType(Me(Me.tableEGE05.MESSAGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEGE05.MESSAGEColumn) = value
            End Set
        End Property
        
        Public Function IsI_MAINTNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_MAINTColumn)
        End Function
        
        Public Sub SetI_MAINTNull()
            Me(Me.tableEGE05.I_MAINTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_XISPNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_XISPColumn)
        End Function
        
        Public Sub SetI_XISPNull()
            Me(Me.tableEGE05.I_XISPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_TIDETRANull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_TIDETRAColumn)
        End Function
        
        Public Sub SetI_TIDETRANull()
            Me(Me.tableEGE05.I_TIDETRAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_NIDETRANull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_NIDETRAColumn)
        End Function
        
        Public Sub SetI_NIDETRANull()
            Me(Me.tableEGE05.I_NIDETRAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_TIDESUCNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_TIDESUCColumn)
        End Function
        
        Public Sub SetI_TIDESUCNull()
            Me(Me.tableEGE05.I_TIDESUCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_NIDESUCNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_NIDESUCColumn)
        End Function
        
        Public Sub SetI_NIDESUCNull()
            Me(Me.tableEGE05.I_NIDESUCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CDEPSUCNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CDEPSUCColumn)
        End Function
        
        Public Sub SetI_CDEPSUCNull()
            Me(Me.tableEGE05.I_CDEPSUCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CCOLNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CCOLColumn)
        End Function
        
        Public Sub SetI_CCOLNull()
            Me(Me.tableEGE05.I_CCOLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_FSUELDONull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_FSUELDOColumn)
        End Function
        
        Public Sub SetI_FSUELDONull()
            Me(Me.tableEGE05.I_FSUELDOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CTIPVINNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CTIPVINColumn)
        End Function
        
        Public Sub SetI_CTIPVINNull()
            Me(Me.tableEGE05.I_CTIPVINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CINDTDANull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CINDTDAColumn)
        End Function
        
        Public Sub SetI_CINDTDANull()
            Me(Me.tableEGE05.I_CINDTDAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_FINGEMPNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_FINGEMPColumn)
        End Function
        
        Public Sub SetI_FINGEMPNull()
            Me(Me.tableEGE05.I_FINGEMPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_FRETTRANull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_FRETTRAColumn)
        End Function
        
        Public Sub SetI_FRETTRANull()
            Me(Me.tableEGE05.I_FRETTRAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_NHORSUCNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_NHORSUCColumn)
        End Function
        
        Public Sub SetI_NHORSUCNull()
            Me(Me.tableEGE05.I_NHORSUCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_XCARSUCNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_XCARSUCColumn)
        End Function
        
        Public Sub SetI_XCARSUCNull()
            Me(Me.tableEGE05.I_XCARSUCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_VSALSUCNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_VSALSUCColumn)
        End Function
        
        Public Sub SetI_VSALSUCNull()
            Me(Me.tableEGE05.I_VSALSUCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_NCUECONNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_NCUECONColumn)
        End Function
        
        Public Sub SetI_NCUECONNull()
            Me(Me.tableEGE05.I_NCUECONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CTIPCUENull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CTIPCUEColumn)
        End Function
        
        Public Sub SetI_CTIPCUENull()
            Me(Me.tableEGE05.I_CTIPCUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CENTFINNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CENTFINColumn)
        End Function
        
        Public Sub SetI_CENTFINNull()
            Me(Me.tableEGE05.I_CENTFINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_TAFICAJNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_TAFICAJColumn)
        End Function
        
        Public Sub SetI_TAFICAJNull()
            Me(Me.tableEGE05.I_TAFICAJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_TAFIPOSNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_TAFIPOSColumn)
        End Function
        
        Public Sub SetI_TAFIPOSNull()
            Me(Me.tableEGE05.I_TAFIPOSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_FINGPOSNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_FINGPOSColumn)
        End Function
        
        Public Sub SetI_FINGPOSNull()
            Me(Me.tableEGE05.I_FINGPOSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAT_SIGNNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.AT_SIGNColumn)
        End Function
        
        Public Sub SetAT_SIGNNull()
            Me(Me.tableEGE05.AT_SIGNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_XNOMAPLNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_XNOMAPLColumn)
        End Function
        
        Public Sub SetI_XNOMAPLNull()
            Me(Me.tableEGE05.I_XNOMAPLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_XNOMPANNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_XNOMPANColumn)
        End Function
        
        Public Sub SetI_XNOMPANNull()
            Me(Me.tableEGE05.I_XNOMPANColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_NDIGTRANull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_NDIGTRAColumn)
        End Function
        
        Public Sub SetI_NDIGTRANull()
            Me(Me.tableEGE05.I_NDIGTRAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_XNOMCOTNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_XNOMCOTColumn)
        End Function
        
        Public Sub SetI_XNOMCOTNull()
            Me(Me.tableEGE05.I_XNOMCOTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CESTSOCNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CESTSOCColumn)
        End Function
        
        Public Sub SetI_CESTSOCNull()
            Me(Me.tableEGE05.I_CESTSOCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CCATNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CCATColumn)
        End Function
        
        Public Sub SetI_CCATNull()
            Me(Me.tableEGE05.I_CCATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_NEMPTRANull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_NEMPTRAColumn)
        End Function
        
        Public Sub SetI_NEMPTRANull()
            Me(Me.tableEGE05.I_NEMPTRAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_XESTCAJNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_XESTCAJColumn)
        End Function
        
        Public Sub SetI_XESTCAJNull()
            Me(Me.tableEGE05.I_XESTCAJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_XESTPOSNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_XESTPOSColumn)
        End Function
        
        Public Sub SetI_XESTPOSNull()
            Me(Me.tableEGE05.I_XESTPOSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_TIDEEMPNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_TIDEEMPColumn)
        End Function
        
        Public Sub SetI_TIDEEMPNull()
            Me(Me.tableEGE05.I_TIDEEMPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_NIDEEMPNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_NIDEEMPColumn)
        End Function
        
        Public Sub SetI_NIDEEMPNull()
            Me(Me.tableEGE05.I_NIDEEMPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_NDIGEMPNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_NDIGEMPColumn)
        End Function
        
        Public Sub SetI_NDIGEMPNull()
            Me(Me.tableEGE05.I_NDIGEMPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CDEPNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CDEPColumn)
        End Function
        
        Public Sub SetI_CDEPNull()
            Me(Me.tableEGE05.I_CDEPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_XNOMEMPNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_XNOMEMPColumn)
        End Function
        
        Public Sub SetI_XNOMEMPNull()
            Me(Me.tableEGE05.I_XNOMEMPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_FINGBASNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_FINGBASColumn)
        End Function
        
        Public Sub SetI_FINGBASNull()
            Me(Me.tableEGE05.I_FINGBASColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_NHORBASNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_NHORBASColumn)
        End Function
        
        Public Sub SetI_NHORBASNull()
            Me(Me.tableEGE05.I_NHORBASColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_VSUETRANull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_VSUETRAColumn)
        End Function
        
        Public Sub SetI_VSUETRANull()
            Me(Me.tableEGE05.I_VSUETRAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_VSALTRANull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_VSALTRAColumn)
        End Function
        
        Public Sub SetI_VSALTRANull()
            Me(Me.tableEGE05.I_VSALTRAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_XNOMSUCNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_XNOMSUCColumn)
        End Function
        
        Public Sub SetI_XNOMSUCNull()
            Me(Me.tableEGE05.I_XNOMSUCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_CUSUNEWNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_CUSUNEWColumn)
        End Function
        
        Public Sub SetI_CUSUNEWNull()
            Me(Me.tableEGE05.I_CUSUNEWColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_FULTNOVNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_FULTNOVColumn)
        End Function
        
        Public Sub SetI_FULTNOVNull()
            Me(Me.tableEGE05.I_FULTNOVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsI_FCARCAJNull() As Boolean
            Return Me.IsNull(Me.tableEGE05.I_FCARCAJColumn)
        End Function
        
        Public Sub SetI_FCARCAJNull()
            Me(Me.tableEGE05.I_FCARCAJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMESSAGENull() As Boolean
            Return Me.IsNull(Me.tableEGE05.MESSAGEColumn)
        End Function
        
        Public Sub SetMESSAGENull()
            Me(Me.tableEGE05.MESSAGEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EGE05RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EGE05Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EGE05Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EGE05Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ErrorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMensaje As DataColumn
        
        Friend Sub New()
            MyBase.New("Error")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MensajeColumn As DataColumn
            Get
                Return Me.columnMensaje
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _ErrorRow
            Get
                Return CType(Me.Rows(index),_ErrorRow)
            End Get
        End Property
        
        Public Event _ErrorRowChanged As _ErrorRowChangeEventHandler
        
        Public Event _ErrorRowChanging As _ErrorRowChangeEventHandler
        
        Public Event _ErrorRowDeleted As _ErrorRowChangeEventHandler
        
        Public Event _ErrorRowDeleting As _ErrorRowChangeEventHandler
        
        Public Overloads Sub Add_ErrorRow(ByVal row As _ErrorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_ErrorRow(ByVal Mensaje As String) As _ErrorRow
            Dim row_ErrorRow As _ErrorRow = CType(Me.NewRow,_ErrorRow)
            row_ErrorRow.ItemArray = New Object() {Mensaje}
            Me.Rows.Add(row_ErrorRow)
            Return row_ErrorRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _ErrorDataTable = CType(MyBase.Clone,_ErrorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _ErrorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMensaje = Me.Columns("Mensaje")
        End Sub
        
        Private Sub InitClass()
            Me.columnMensaje = New DataColumn("Mensaje", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMensaje)
        End Sub
        
        Public Function New_ErrorRow() As _ErrorRow
            Return CType(Me.NewRow,_ErrorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _ErrorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_ErrorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ErrorRowChangedEvent) Is Nothing) Then
                RaiseEvent _ErrorRowChanged(Me, New _ErrorRowChangeEvent(CType(e.Row,_ErrorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ErrorRowChangingEvent) Is Nothing) Then
                RaiseEvent _ErrorRowChanging(Me, New _ErrorRowChangeEvent(CType(e.Row,_ErrorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ErrorRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ErrorRowDeleted(Me, New _ErrorRowChangeEvent(CType(e.Row,_ErrorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ErrorRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ErrorRowDeleting(Me, New _ErrorRowChangeEvent(CType(e.Row,_ErrorRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_ErrorRow(ByVal row As _ErrorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ErrorRow
        Inherits DataRow
        
        Private table_Error As _ErrorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_Error = CType(Me.Table,_ErrorDataTable)
        End Sub
        
        Public Property Mensaje As String
            Get
                Try 
                    Return CType(Me(Me.table_Error.MensajeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Error.MensajeColumn) = value
            End Set
        End Property
        
        Public Function IsMensajeNull() As Boolean
            Return Me.IsNull(Me.table_Error.MensajeColumn)
        End Function
        
        Public Sub SetMensajeNull()
            Me(Me.table_Error.MensajeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ErrorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _ErrorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _ErrorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _ErrorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
